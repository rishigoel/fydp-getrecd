{"version":3,"sources":["spotifyFunctions.js","App.js","serviceWorker.js","index.js","spotifyWebApi.js"],"names":["spotifyWebApi","SpotifyWebApi","stateKey","playlistName","uriBuilderString","topTrackIds","String","recommendedTrackIds","recommendedTrackUris","makePlaylist","getMyTopTracks","then","response","index","push","shift","console","log","createPlaylist","name","addTracksToPlaylist","uris","getRecommendations","App","callBackendAPI","_callee","body","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","this","token","_this2","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getHashParams","access_token","setAccessToken","localStorage","removeItem","state","length","text","possible","charAt","Math","floor","random","generateRandomString","setItem","url","encodeURIComponent","join","href","authorize","res","setState","data","express","catch","err","react_default","createElement","className","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_extend","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","_performRequest","requestData","callback","req","XMLHttpRequest","promiseFunction","resolve","reject","type","open","parameters","qs","key","value","_buildUrl","params","setRequestHeader","contentType","onreadystatechange","readyState","responseText","JSON","parse","error","success","send","postData","stringify","returnedPromise","deferred","defer","resolvedResult","rejectedResult","Promise","_promiseProvider","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","changePlaylistDetails","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","searchAlbums","searchArtists","searchTracks","searchPlaylists","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","setVolume","volume_percent","setShuffle","getAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","module","exports"],"mappings":"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","file":"static/js/main.c435c947.chunk.js","sourcesContent":["//spotifyFunctions.js\n\nimport SpotifyWebApi from './spotifyWebApi'\n\nconst spotifyWebApi = new SpotifyWebApi();\nconst stateKey = 'spotify-auth-key';\nconst playlistName = 'FYDPPlaylistTest';\nconst uriBuilderString = 'spotify:track:';\nvar topTrackIds = [String];\nvar recommendedTrackIds = [String];\nvar recommendedTrackUris = [String];\n\nexport function authorize() {\n      localStorage.removeItem(stateKey);\n      const CLIENT_ID = '3f2b320cfc4f4af5a106fa21e6bc8d0c';\n      const REDIRECT_URI = 'https://rishigoel.github.io/fypd-getrecd';\n      const scopes = [\n      'user-top-read',\n      'playlist-modify-public',\n      'playlist-modify-private'];\n\n      const generateRandomString = length => {\n          let text = '';\n          const possible =\n          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n      const stateKey = 'spotify-auth-key'\n      var access_token = ''\n\n\n          while (text.length <= length) {\n           text += possible.charAt(Math.floor(Math.random() * possible.length));\n          }\n\n          return text;\n        };\n      const state = generateRandomString(16);\n      localStorage.setItem(stateKey, state);\n\n      const url = 'https://accounts.spotify.com/authorize?client_id=' + CLIENT_ID +\n        '&redirect_uri=' + encodeURIComponent(REDIRECT_URI) +\n        '&scope=' + encodeURIComponent(scopes.join(' ')) +\n        '&response_type=token' + '&state='+encodeURIComponent(state);\n\n      window.location.href = url;\n  }\n\nexport function getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n    return hashParams;\n  }\n\n\nexport function setToken(token: String) {\n  spotifyWebApi.setAccessToken(token);\n}\n\nexport function makePlaylist() {\n  getTopTracks()\n}\n\nfunction getTopTracks() {\n  spotifyWebApi.getMyTopTracks()\n    .then((response) => {\n      for (var index in response['items']) {\n        topTrackIds.push(response['items'][index]['id'])\n      }\n      getRecommendations()\n    });\n}\n\n// TODO: Call python script here\nfunction getRecommendations() {\n  recommendedTrackIds = topTrackIds\n  recommendedTrackIds.shift()\n  for (var index in recommendedTrackIds) {\n    recommendedTrackUris.push(uriBuilderString+recommendedTrackIds[index])\n  }\n  recommendedTrackUris.shift()\n  console.log(recommendedTrackUris)\n  savePlaylist()\n}\n\nfunction savePlaylist() {\n  spotifyWebApi.createPlaylist({\"name\": playlistName})\n  .then((response) => {\n    console.log(response)\n    spotifyWebApi.addTracksToPlaylist(response['id'], {\"uris\": recommendedTrackUris})\n    .then((response) => {\n      console.log(response)\n    });\n  });\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {authorize, getHashParams, setToken, makePlaylist} from './spotifyFunctions.js'\n\nclass App extends Component {\n\n  componentDidMount() {\n   let hashParams = getHashParams();\n    if(!hashParams.access_token) {\n      authorize();\n    } else {\n      console.log(hashParams.access_token)\n      setToken(hashParams.access_token);\n      makePlaylist();\n\n    }\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    return ( \n      <div className=\"App\">\n      Get Rec'd\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function() {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function(promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function(promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function(resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function(rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function(object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function(url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function(requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function(resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n      if (requestData.contentType) {\n        req.setRequestHeader('Content-Type', requestData.contentType)\n      }\n\n      req.onreadystatechange = function() {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null\n        if (requestData.postData) {\n          postData = requestData.contentType === 'image/jpeg' ? requestData.postData : JSON.stringify(requestData.postData)\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function() {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function(requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function() {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function(url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function(playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function(playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function(userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function(playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function(playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: uris\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function(playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function(playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function(playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function(playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function(playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function(playlistId, imageData, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function(trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function(artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function(artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function(query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function(trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function(callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function(callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function(deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function(position_ms, options, callback) {\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function(volume_percent, options, callback) {\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function() {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function(accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function(PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function(resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n"],"sourceRoot":""}